---
title: ROS Basics, 1
cat: ROS
---
<%= homework_hdr %>
1. **Textbook:** Programming Robots with ROS: Read Chapter 4,5,7. Make this hands-on reading, trying to implement varius of the examples that are described.
1. **Read** this seminal paper: [Brooks - A robust layered control system for a mobile robot](https://www.semanticscholar.org/paper/A-robust-layered-control-system-for-a-mobile-robot-Brooks/dc66c15a005dd1a3a9f033769e7fbc3b943be188) He introduces the notion of layered control and how one layer can override another. Think about how that might be made applicable to our Campus Rover.
1. **Programming** Do <%= link_to_topic :hw_ros_topic %>
1. **Lab Notebook**: Create a google doc here and start keeping your lab notebook. [Here's a link to the folder.](https://drive.google.com/open?id=14_tL1sRrBDTjXUeV6pbxieLbsw1CFNjX)

### Lab Meeting

#### Demos
  * Demonstrations from each student
  * Celi demonstrates iRobot Create
  * <%= link_to_topic :hands_on_rviz_intro %>

#### Odometry
* Topics have a name and a message type
* Twist message type is very very common.
  * Expresses a velocity in linear and angular aspects
  * Note our robot can only move forward and backward (x axis)
  * And it can only rotate around (z axis)
  * Twist doesn't say anything about where the robot (thinks it) is
  * "cmd_vel" is the topic to *directly* command the base (people often refer to the robot as a whole as the base) to move. The message type for cmd_vel is Twist
* Odometry
  * The Robot's "belief" of where it is, and what it is doing.
  * Based on sensors in the base, including possibly the motors, a gps, a magnetometer etc.
  * Odometry is published as topic /odom and the message is nav_msgs/Odometry
* nav_msgs/Odometry
  * Header - standard header
  * pose - where does the robot thinks that it is (including Covariance - how sure is it?)
  * twist - how does it think it is moving (also with a covariance)
* tf packages
  * See [TF Tutorial](http://wiki.ros.org/navigation/Tutorials/RobotSetup/TF)
  * Coordinate system
  * There will/can be many
  * Some of the components might move (an arm for example)
  * tf system periodically broadcasts the current relationship between coordinate systems
  * Quaternions

  #### Homework for next week
  * Celi explains PA1

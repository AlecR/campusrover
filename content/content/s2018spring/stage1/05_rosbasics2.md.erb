---
title: ROS Basics, continued
cat: ROS
---
<%= homework_hdr %>
1. **PA**: [Programming Assignment 1: ROS and STDR Basics](https://github.com/campusrover/cosi119a-homeworks/blob/master/CS119aPA1.pdf). <%= deliverable "Submit to Latte what is requested in the writeup." %>
1. **Tutorial**: Learn about coordinate frames and the **tf** package. Do the whole series of python tutorials under [TF Tutorials](http://wiki.ros.org/tf/Tutorials). Respond to the following questions in your submission to Latte:
    * Why is there a transform tree? Why are transformations published. How would you decide how often to publish the transformation?
    * What is a quaternion? What does it do or represent? How do you convert between it and other formats?
<%= deliverable "Submit to latte a pdf with the answers to those quesitons." %>
1. **Textbook**: Read chapters 8,9 and 10 of the textbook. Implement and test your version of the Teleop Bot. Be ready to demonstrate it at the next class. If you want to go a little extra, get Andrea or Celi to help you get it to run on the actual robot! <%= deliverable "Your code, zipped, for your version of the Teleop Bot. Also preparation for demo." %>

### Lab Meeting
* Students demonstrate Teleop Examples
* Discussion about challenges encountered and how to overcome them. Also PA1 assignment

### Review
* ROS Node: In general any ROS functionality is packaged into a node
* A node is a node because at startup it calls `rospy.init_node('name')`
* That declares its presence to ROS Core (`roscore`)
* Much ROS functionality is in the form of `topics`
* Nodes can be topic **publishers** and/or **subscribers**

#### Topics
* Topics have a name (e.g. `cmd_vel`)
* Topics have a Message type (e.g. `Twist`)
* There is a large catalog of topic names and Message types.
* It is recommended that you use one of those
* This is for consistency and learnability but also because declaring a new Message type is a little kludgy.

##### Subscribing
* A subscriber declares that it is waiting for a Topic by a certain name to be published and declares a callback function to

<%= ruby_begin %>
#!/usr/bin/env python
import rospy
from std_msgs.msg import String

def callback(data):
    rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)

def listener():
    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber("chatter", String, callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    listener()
<%= ruby_end %>

##### Publishing
* A publisher simply makes a call, including topic name and message
* The call never  blocks!
* All subscribers' callbacks are called for each publication on a topic

<%= code_begin %>
#!/usr/bin/env python
# license removed for brevity
import rospy
from std_msgs.msg import String

def talker():
    pub = rospy.Publisher('chatter', String, queue_size=10)
    rospy.init_node('talker', anonymous=True)
    rate = rospy.Rate(10) # 10hz
    while not rospy.is_shutdown():
        hello_str = "hello world %s" % rospy.get_time()
        rospy.loginfo(hello_str)
        pub.publish(hello_str)
        rate.sleep()

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass
<%= code_end %>

#### Services
* Create a more simple "client/server" API
* Difference with Topics
  * Not subscribe and publish (async)
  * But Call/Return (sync)
  * Can return data to the caller directly
  * Will block
  * Note: client and server will be in different nodes (possibly on different computers!)

* Defining a service
  * Define service **input** and **output** messages
  * See book for details of declaration files and builds etc.
  * `rosservice` CLI to examine and call services by hand

##### Example
  * [ROS Tutorial on Services](http://wiki.ros.org/ROS/Tutorials/WritingServiceClient%28python%29)
  * Service that adds two numbers, e.g. "addTwoInts(i, j) returns i+j"

##### Server
<%= ruby_begin %>
#!/usr/bin/env python

from beginner_tutorials.srv import *
import rospy

def handle_add_two_ints(req):
    print "Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b))
    return AddTwoIntsResponse(req.a + req.b)

def add_two_ints_server():
    rospy.init_node('add_two_ints_server')
    s = rospy.Service('add_two_ints', AddTwoInts, handle_add_two_ints)
    print "Ready to add two ints."
    rospy.spin()

if __name__ == "__main__":
    add_two_ints_server()
<%= ruby_end %>

##### Client

<%= ruby_begin %>
#!/usr/bin/env python

import sys
import rospy
from beginner_tutorials.srv import *

def add_two_ints_client(x, y):
    rospy.wait_for_service('add_two_ints')
    try:
        add_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)
        resp1 = add_two_ints(x, y)
        return resp1.sum
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def usage():
    return "%s [x y]"%sys.argv[0]

if __name__ == "__main__":
    if len(sys.argv) == 3:
        x = int(sys.argv[1])
        y = int(sys.argv[2])
    else:
        print usage()
        sys.exit(1)
    print "Requesting %s+%s"%(x, y)
    print "%s + %s = %s"%(x, y, add_two_ints_client(x, y))
<%= ruby_end %>

#### Actions
* The final common way to communicate between nodes
* Used for processes that might take long (seconds and minutes)
* Goal time-extended, goal oriented, asynchronous, actions, including partial result feedback.
* Follow a particular call protocol
* Action specification:
  * Goal
  * Feedback
  * Result
* Rules for Goals (of an action)
  * Only one goal can have 'active' status at one time
  * New goals preempt previous goals based on the time stamp in their GoalId
  * An explicit preempt goal (?) preempts all goals with timestamps that are less than or equal to the new goal
  * Accepting a new goal implies successfull preemption of any old goal and the status of the old goal will automatically be changed to reflect this.
  * [See ActionLib](http://wiki.ros.org/actionlib)
  
#####

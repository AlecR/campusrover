---
title: "Project: ROS Maze"
desc: Use ROS to design a simuated robot that runs a maze
level: intermediate
---
#### Background
Working in a team of 3 students, we will write ROS code to drive the robot through a maze. You will do it first in simulation [STDR] (http://wiki.ros.org/stdr_simulator) and then with the TB3. We will not use SLAM as a way to really get familiar with the lower level issues.

##### Reference
* ROS Book up to Chapter 7: "WanderBot"
* [Udacity AI for Robotics Course article](https://classroom.udacity.com/courses/cs373/lessons/48684821)

##### Notes
You will **not** be using SLAM for this project. Instead you will use the Lidar to return to you distances to the next obstacle at different bearings. That way you can sense walls left, right and in front of you.

Notice that you will be writing and testing this algorithm in simulation mode. The simulator which you will use is called STDR. That stands for Two Dimensional Something or other. You will be designing and testing your algorithm totally in simulation.

Once you have the algorithm working, we will go to the next big step which is to actually run in the TB3!

As you write code, please try to think about good programming habits and designs. Your code may start as a bunch of spaghetti but by the time you hand it in we are expecting something with reasonable modularity, abstractions, single responsibility principle etc.

#### Learning Objectives
* Demonstrate ability to write a multi node ROS app
* Learn how sensors work, especially the LIDAR
* Learn how to leverage the simulators for testing and development in ROS
* Research how to use raw LIDAR data to orient the robot in a maze
* Learn how to actually deploy code to an TB3 and test it

#### Steps
1. Make sure you've read or looked at Chapters 1-7 of the book, or gotten the same background through your means
1. Study Lessons 1-4 of [Udacity AI for Robotics Course article](https://classroom.udacity.com/courses/cs373/lessons/48684821). Studying means actually doing the exercises and quizzes. Lessons 1 and 2 will give you a great intuitive and conceptual understanding of localization. Chapter 4 will teach you about Kalman filters. This is worth your time, you will learn a lot!
1. Set up and play with STDR
1. Make/download a graph of a simple maze and upload it to STDR (see stdr guide below)
1. Write the initial code (using Python) to start listening to the messages that the similator robot sensors are publishing.
1. Figure out how to use that data (which is 360 degrees of distance data) to determine what the walls are the robot is confronting
1. Use what you learned in the previous Maze assignent to implement a similar or identical algorithm, this time using LIDAR data
1. Implement the complete Maze Solver and demonstrate it working in the simulator
1. Learn how to deploy your code to a real TB3 and experiment a little
1. Adapt your code (if necessary) to work as well in the live robot
1. Demonstrate!


#### STDR GUIDE

Download and learn official tutorials from [stdr_simulator](http://wiki.ros.org/stdr_simulator)

##### Basic workflow - command line cheat sheet
1. `roscore` open ROS server
1. `source /opt/ros/kinetic/setup.bash` open STDR server ,
   * with default map  `roslaunch stdr_launchers server_with_map_and_gui_plus_robot.launch`
   * with no map `roslaunch stdr_launchers server_no_map.launch`, and **upload your own** (also see: [How to load a map](http://wiki.ros.org/stdr_simulator/Tutorials/How%20to%20load%20a%20map))
         *way1 -> `rosrun stdr_server stdr_server_node maps/<your_own_maze.yaml>`
         *way2 -> `roscd stdr_resources` -> `rosrun stdr_server load_map maps/<your_own_maze.yaml>`
1. `roslaunch stdr_gui stdr_gui.launch` open GUI visualizer.
1. `roslaunch stdr_launchers rviz.launch` open RVIZ(optional).
1. `chmod +x rosmaze <your_own_script.py>` -> `rosrun <workspace name> <your_own_script.py>` compile and run your script. *we recommand put your own scripts in workspace stdr_samples (catkin_ws/src/stdr_simulator/stdr_samples)

##### How to register external map to stdr
1. have an image to register in **.png** format. *[online-format-converter](https://www.online-convert.com/)
1. put <your_own.png> in **catkin_ws/src/stdr_simulator/stdr_resources/maps**
1. write a **<your_own.yaml>** file for your map, format exactly same as other yaml files, file name match with the map name.
1. put both <your_own.png> and **<your_own.yaml>** in **/opt/ros/kinetic/share/stdr_resources/maps**.
1. now run: `sudo chown -R $USER:$USER /opt/ros/kinetic/share/stdr_resources/maps` (you might not need this line)
1. run: `roscd stdr_resources` -> `rosservice call /stdr_server/load_static_map "mapFile: '$PWD/maps/<your_own.yaml>'"`

---
title: "9: Building Maps"
---
#### Maps in ROS
* Our focus is mobile, ground based robots
* In ROS maps are represented as a 2d grid
* Each dot in the grid corresponds to a square in the real world (based on the resulution of the map)
  * Black dots: walls (not passable)
  * White dots: open space (passable)
  * Grey dots: Unknown
* Maps in fact are stored as images - .png, .jpg, .pgm
* You can edit them in any appropraite image editing tool
* Accompanying YAML file defines mapping between image and real world
* Map = *.png + *.yaml
* example:

<%= code_begin %>
image: map.pgm
resolution: 0.1
origin: [0.0, 0.0, 0.0]
occupied_thresh: 0.65
free_thresh: 0.196
negate: 1
<%= code_end %>

* Definitions:
  * image: filename
  * resolution: in meters, how large a square in the real world does one pixel represent 
  * origin: What is the real world coordinate of the pixel in the [0,0] position
  * occupied_thresh: pixels with color value greater than this number are considered occupied
  * free_thresh: pixels with color value less than this number are considered free. (Values in between are considered unknown)
  * negate: Depending on whether black is 1 or black is 0 in the image representation, it might have to be negated

#### rosbag

* A tool to record messages (some or all) and replay them later
* Allows you to try another algorithm on the exact same sensor data 
* Example: record all `scan` and `tf` messafes
<%= code_begin %>
$ rosbag record scan tf # record to standard file name YYYY-MM-DD-HH-mm-ss.bag
$ rosbag record -a # record all messages, but generates a LOT of data
<%= code_end %>
* And then play them back with a parallel command:
<%= code_begin %>
$ rosbag play --clock foo.bag
<%= code_end %>
* The --clock flag is interesting. rosbag play will set and publish the clock. Be careful that nothing else (e.g. gazebo) is publishing the clock at the same time because this will mess things up!

#### Building Maps

* Maps that are made via Lidar or other sensors will be somewhat rough
* Walls may not be exactly straight and will be blocky
* We're going to experiment with the `gmapping` package (see reference)

##### Generating data to build map from
* Simulated robot in simulated space
* Collect sensor data in a bag
* Then generate a map from it
